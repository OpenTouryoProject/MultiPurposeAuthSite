@*
    //**********************************************************************************
    //* テンプレート
    //**********************************************************************************

    // 以下のLicenseに従い、このProjectをTemplateとして使用可能です。Release時にCopyright表示してSublicenseして下さい。
    // https://github.com/OpenTouryoProject/MultiPurposeAuthSite/blob/master/license/LicenseForTemplates.txt

    //**********************************************************************************
    //* クラス名        ：Login
    //* クラス日本語名  ：サインイン用のView
    //*
    //* 作成日時        ：－
    //* 作成者          ：－
    //* 更新履歴        ：－
    //*
    //*  日時        更新者            内容
    //*  ----------  ----------------  -------------------------------------------------
    //*  2017/04/24  西野 大介         新規
    //**********************************************************************************
*@

@using MultiPurposeAuthSite.Resources;
@using MultiPurposeAuthSite.Models.ViewModels
@using MultiPurposeAuthSite.Models.ASPNETIdentity

@model AccountLoginViewModel

@{
    ViewBag.Title = AccountViews.LoginTitle;
}

@Scripts.Render("~/bundles/multiauthsite")

@* スクリプト・セクション（RenderSection("HeaderScriptsSection", required: true)に出力されます） *@
@section HeaderScriptsSection{
    <!-- Head 部の section -->
}

<h2>@ViewBag.Title</h2>
<div class="row">
    <div class="col-md-8">
        <h4>@AccountViews.LoginH4</h4>
        <hr />
        <section id="loginForm">
            @using (Html.BeginForm("Login", "Account", FormMethod.Post, new { id = "LoginForm", @class = "form-horizontal", role = "form", onsubmit = "Fx_OnSubmit();" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(m => m.ReturnUrl)

                if (ASPNETIdentityConfig.RequireUniqueEmail)
                {
                    <div class="form-group">
                        @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        @Html.LabelFor(m => m.Name, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }

                <div class="form-group">
                    @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <div class="checkbox">
                            @Html.CheckBoxFor(m => m.RememberMe)
                            @Html.LabelFor(m => m.RememberMe)
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button id="normal_signin" type="button" class="btn btn-default">@AccountViews.LoginSubmit</button>
                    </div>
                </div>
                <p>@Html.ActionLink(AccountViews.LoginRegisterActionLink, "Register")</p>
                <p>
                    @*Enable this once you have account confirmation enabled for password reset functionality*@
                    @*これを有効にする前に、パスワード リセット機能に対するアカウント確認を有効にしてください。*@
                    @Html.ActionLink(AccountViews.LoginForgotPasswordActionLink, "ForgotPassword")
                </p>

                @Html.HiddenFor(m => m.Fido2UserId)
                @Html.HiddenFor(m => m.Fido2Signature)
                @Html.HiddenFor(m => m.Fido2AuthenticatorData)
                @Html.HiddenFor(m => m.Fido2ClientData)
            }
        </section>
    </div>
    <div class="col-md-4">

@if (ASPNETIdentityConfig.CanEditExtLogin)
{
        <div class="sample-box-1">
            @*ここに外部ログインを実装*@
            @AccountViews.ExternalLogins
            <section id="socialLoginForm">
                @Html.Partial("_ExternalLoginsListPartial", new AccountExternalLoginListViewModel { ReturnUrl = ViewBag.ReturnUrl })
            </section>
        </div>
}

        <div class="sample-box-1">
            @*ここにIDフェデレーションを実装*@
            ここにIDフェデレーションを実装
        </div>

@if (ASPNETIdentityConfig.CanEditFIDO2Data)
{
        <div class="sample-box-1">
            @*ここにFIDO2を実装*@
            @AccountViews.FIDO2Login
            <section>
                <button id="fido2_signin" type="button" class="btn btn-default">@AccountViews.FIDO2LoginSubmit</button>
            </section>
        </div>
}
    </div>
</div>

@* スクリプト・セクション（RenderSection("FooterScriptsSection", required: true)に出力されます） *@
@section FooterScriptsSection{
    <!-- Footer 部の section -->
    <script>
        $(function () {
            $("#normal_signin").on("click", function () {

                // properties
                $("#Fido2UserId").val("");
                $("#Fido2Signature").val("");
                $("#Fido2AuthenticatorData").val("");
                $("#Fido2ClientData").val("");

                // submit
                $("#LoginForm").submit();
            });
        })

        $(function () {

            //$("#fido2_signin").on("click", function () {
            //    var filters = {
            //        accept:
            //          [
            //            {
            //                type: 'FIDO_2_0',
            //                id: localStorage["credentialId"]
            //            }
            //          ]
            //    };

            //    window.msCrendentials.getAssertion(challenge, filters)
            //     .then(function (result) {
            //         // properties

            //         //$("#Fido2UserId").val(result.credential.id);
            //         $("#Fido2UserId").val(localStorage["credentialId"]);

            //         $("#Fido2Signature").val(result.signature);
            //         $("#Fido2AuthenticatorData").val(result.authenticatorData);
            //         $("#Fido2ClientData").val(result.clientData);

            //         // submit
            //         $("#LoginForm").submit();
            //     });   
            //});

            $("#fido2_signin").on("click", function () {

                var challenge = '@Model.Fido2Challenge';
                var allowList =
                      [
                        {
                            type: 'ScopedCred',
                            id: localStorage["credentialId"]
                        }
                      ];
                var timeout = {};
                var ext = {};

                navigator.authentication.getAssertion(challenge, timeout, allowList, ext)
                    .then(function (result) {
                        // properties

                        //$("#Fido2UserId").val(result.credential.id);
                        $("#Fido2UserId").val(localStorage["credentialId"]);

                        $("#Fido2Signature").val(result.signature);
                        $("#Fido2AuthenticatorData").val(result.authenticatorData);
                        $("#Fido2ClientData").val(result.clientData);

                        // submit
                        $("#LoginForm").submit();
                    });
            });
        })
    </script>
}