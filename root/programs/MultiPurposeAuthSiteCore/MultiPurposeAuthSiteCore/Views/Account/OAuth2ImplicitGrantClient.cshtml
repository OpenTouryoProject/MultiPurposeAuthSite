@*
    // OAuth 2.0 テスト用 画面なので、必要に応じて流用 or 削除して下さい。

    //**********************************************************************************
    //* Copyright (C) 2017 Hitachi Solutions,Ltd.
    //**********************************************************************************

    #region Apache License
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    #endregion

    //**********************************************************************************
    //* クラス名        ：OAuth2ImplicitGrantClient
    //* クラス日本語名  ：OAuth2ImplicitGrantClient（テスト用）
    //* ・この画面は、OAuth2のテスト用画面です。テストのためこの画面はbearer tokenを露見させます。本番環境にこの画面を提供しないで下さい。
    //* ・This screen is the test screen of OAuth 2. This screen exposes bearer token for testing. Do not provide this screen for production environment.
    //*
    //* 作成日時        ：－
    //* 作成者          ：－
    //* 更新履歴        ：－
    //*
    //*  日時        更新者            内容
    //*  ----------  ----------------  -------------------------------------------------
    //*  2017/04/24  西野 大介         新規
    //*  2019/02/18  西野 大介         FAPI2 CC対応実施
    //*  2020/01/07  西野 大介         PPID対応実施
    //**********************************************************************************
*@

@{
    ViewBag.Title = "OAuth2ImplicitGrantClient";
}

@* スクリプト・セクション（RenderSection("HeaderScriptsSection", required: true)に出力されます） *@
@section HeaderScriptsSection{
    <!-- Head 部の section -->
}

<h2>@ViewBag.Title.</h2>
<div class="row">
    <div class="col-md-8">
        <p><a class="btn btn-primary" href="#" id="OAuth2UserInfoEndpoint" url="@(Config.OAuth2AuthorizationServerEndpointsRootURI + Config.OAuth2UserInfoEndpoint)">Get user claims</a></p>
        <p><a class="btn btn-primary" href="#" id="TestHybridFlowWebAPI" url="@(Config.OAuth2AuthorizationServerEndpointsRootURI + Config.TestHybridFlowWebAPI)">Test hybrid flow(TestClient固定)</a></p>
        <br />
        <div id="debug"></div>
@if (!string.IsNullOrEmpty((string)ViewData["FormPost"]))
{
        <div id="form_post">Objected forms : @ViewData["FormPost"]</div>
}
        <br />
        <a href="https://jwt.io/">JSON Web Tokens - jwt.io</a><br />
        <a href="https://syncer.jp/json-prettyprint">JSON Pretty Linter  - JSONの整形と構文チェック</a><br />
    </div>
</div>

@* スクリプト・セクション（RenderSection("FooterScriptsSection", required: true)に出力されます） *@
@section FooterScriptsSection{
    <script type="text/javascript">

        var fragment = "";

        function CallOAuthAPI(url, token, requestData) {
            alert(
                "<url>" + "\n" + url + "\n" +
                "<token>" + "\n" + token + "\n" +
                "<data>" + "\n" + requestData);

            var authorizationHeaders = null;

            if (token) {
                authorizationHeaders = { 'Authorization': 'Bearer ' + token };

                $.ajax({
                    type: 'get',
                    url: url,
                    crossDomain: true,
                    headers: authorizationHeaders,
                    success: function (responseData, textStatus, jqXHR) {
                        alert(textStatus + ', ' + JSON.stringify(responseData));
                    },
                    error: function (responseData, textStatus, errorThrown) {
                        alert(textStatus + ', ' + errorThrown.message);
                    }
                });
            }
            else {
                $.ajax({
                    type: 'post',
                    url: url,
                    crossDomain: true,
                    data: requestData,
                    success: function (responseData, textStatus, jqXHR) {
                        alert(textStatus + ', ' + JSON.stringify(responseData));
                    },
                    error: function (responseData, textStatus, errorThrown) {
                        alert(textStatus + ', ' + errorThrown.message);
                    }
                });
            }
        }

        $(function () {

            // フラグメントを取得し、
            fragment = getFragment();

            //alert("location.hash : " + window.location.hash);
            //alert("Objected fragment : " + JSON.stringify(fragment));

            document.getElementById("debug").innerHTML
                = "Objected fragment : " + JSON.stringify(fragment);

            // 「access_token」（Bearer Token）が
            // "露見"しないようwindow.location.hashを消去。
            // ~~~~~~
            window.location.hash = fragment.state || '';

            // OAuthGetUserClaimsWebAPI
            //   access_token (Bearer Token) を使用して
            //   AuthorizationServerのWebAPIにアクセスする。
            $('#OAuth2UserInfoEndpoint').on('click', function () {
                CallOAuthAPI($('#OAuth2UserInfoEndpoint').attr("url"), fragment.access_token, null);
            });

            // TestHybridFlowWebAPI
            //   Hybridのテスト用のAuthorizationServerのWebAPIにアクセスする。
            $('#TestHybridFlowWebAPI').on('click', function () {
                CallOAuthAPI($('#TestHybridFlowWebAPI').attr("url"), null, 'code=' + fragment.code);
            });
        });

    </script>
}
